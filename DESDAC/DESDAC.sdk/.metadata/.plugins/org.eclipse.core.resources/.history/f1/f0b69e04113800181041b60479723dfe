/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "math.h"

    void goConfigureDC( unsigned int offset){ //MAX EN MVOLTIOS
    	volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
    	unsigned int i=0;
    	p[0]=1;
    	p[1]=100;
    	p[3]=0b11;
    	for (i=0; i<100; i++){
    		p[4]=i;//Direccion
    		p[2]=(uint32_t)((float)offset*1.24);//Dato
    	}
    	p[3]=0b00;
    }

    void goConfigureSawTooth( unsigned int t, unsigned int offset, float max ){ //MAX EN MVOLTIOS
    	volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
    	unsigned int i=0;
    	p[0]=1;
    	p[1]=t;
    	double val=0;
    	p[5]=0b11;
    	for (i=0; i<t; i++){
    		double step= (max*1.24)/(double)t;
    		val =val+step;
    		p[7]=i;//Direccion
    		p[4]=(uint32_t)(val);//Dato
    		}
    	p[5]=0b00;
    }

    void goConfigureTriangular( unsigned int t, unsigned int offset, float max ){ //MAX EN MVOLTIOS
    	volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
    	unsigned int i=0;
    	p[0]=1;
    	p[1]=t;
    	double val=0;
    	double step= (max*1.24)/((double)t/2.0);
    	p[3]=0b11;
    	for (i=0; i<t; i++){
    		if (t%2!=0){
    			if(i<t/2){
    				val =val+step;}
    			else{
    				val =val-step;}
    		}
    		else{
    			if(i==t/2 || i==t/2-1){
    			}
    			else if(i<t/2){
    				val =val+step;}
    			else{
    				val =val-step;}
    		}
    		p[4]=i;//Direccion
    		p[2]=(uint32_t)(val+offset*1.24);//Dato
    	}
    	p[3]=0b00;
    }

    void goConfigureSin( unsigned int t, unsigned int Amplitude, unsigned int offset){ //MAX EN MVOLTIOS
    	volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
    	unsigned int i=0;
    	p[0]=1;
    	p[1]=t;
    	p[3]=0b11;
    	for (i=0; i<t; i++){
    		double val =((((Amplitude*1.24)/2)*(sin(((2*3.141592654)/(double)t)*i)+1.0))+0.5);
    		p[4]=i;//Direccion
    		p[2]=(uint32_t)(val+offset);//Dato
    	}
    	p[3]=0b00;
    }
    void goDisableDAC (void){
    	volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
    	p[0]=0;
    }


int main()
{
    init_platform();

    print("Hello World\n\r");
    print("Hello World\n\r");
    print("Hello World\n\r");
    print("Hello World\n\r");
    print("Hello World\n\r");
/*
	while(1){
	unsigned int i=0;
	unsigned int max=50;
	for (i=0; i<max/2; i++){
		goConfigureDC(1000/2*(sin(2.0*3.14/max*(float)i)+1));
	}
	for (i=0; i<max/2; i++){
		goConfigureDC(3300/2*(sin(2.0*3.14/max*(float)i)+1));
	}
	for (i=0; i<max/2; i++){
		goConfigureDC(1000/2*(sin(2.0*3.14/max*(float)i)+1));
	}


	}*/

    //goConfigureSin(40000,3300,0);



	//volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
	//unsigned int i=0;
	//p[0]=0b00001;
	//p[1]=(uint32_t)1000;
	//p[3]=0b11;
	//for (i=0; i<1000; i++){
	//	p[4]=(uint32_t)i;//Direccion
	//	p[2]=(uint32_t)(((float)3300*i/1000)*1.24);//Dato
	//}
	//p[3]=0b00;


	volatile uint32_t *p = (volatile uint32_t*)0x43C00000;
		unsigned int i=0;
		p[0]=0b00001;
		p[1]=(uint32_t)8;
		p[3]=0b11;
		p[4]=(uint32_t)0;//Direccion
		p[2]=(uint32_t)(0*1.24);//Dato
		p[4]=(uint32_t)1;//Direccion
		p[2]=(uint32_t)(0*1.24);//Dato
		p[4]=(uint32_t)2;//Direccion
		p[2]=(uint32_t)(0*1.24);//Dato
		p[4]=(uint32_t)3;//Direccion
		p[2]=(uint32_t)(0*1.24);//Dato



		p[4]=(uint32_t)4;//Direccion
		p[2]=(uint32_t)(3000*1.24);//Dato
		p[4]=(uint32_t)5;//Direccion
		p[2]=(uint32_t)(3000*1.24);//Dato
		p[4]=(uint32_t)6;//Direccion
		p[2]=(uint32_t)(3000*1.24);//Dato
		p[4]=(uint32_t)7;//Direccion
		p[2]=(uint32_t)(3000*1.24);//Dato

		p[3]=0b00;

    cleanup_platform();






    return 0;
}

